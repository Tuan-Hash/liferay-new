/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.hiop.hisc.reports.model.impl;

import com.hiop.hisc.reports.model.Report;
import com.hiop.hisc.reports.model.ReportModel;
import com.hiop.hisc.reports.service.persistence.ReportPK;

import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Report service. Represents a row in the &quot;hisc_report_Report&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ReportModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReportImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReportImpl
 * @generated
 */
@JSON(strict = true)
public class ReportModelImpl
	extends BaseModelImpl<Report> implements ReportModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a report model instance should use the <code>Report</code> interface instead.
	 */
	public static final String TABLE_NAME = "hisc_report_Report";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"reportId", Types.BIGINT},
		{"categoryId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"icon", Types.VARCHAR}, {"sources", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icon", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sources", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table hisc_report_Report (uuid_ VARCHAR(75) null,reportId LONG not null,categoryId LONG not null,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(500) null,icon VARCHAR(75) null,sources STRING null,primary key (reportId, categoryId))";

	public static final String TABLE_SQL_DROP = "drop table hisc_report_Report";

	public static final String ORDER_BY_JPQL = " ORDER BY report.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY hisc_report_Report.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ReportModelImpl() {
	}

	@Override
	public ReportPK getPrimaryKey() {
		return new ReportPK(_reportId, _categoryId);
	}

	@Override
	public void setPrimaryKey(ReportPK primaryKey) {
		setReportId(primaryKey.reportId);
		setCategoryId(primaryKey.categoryId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ReportPK(_reportId, _categoryId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ReportPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Report.class;
	}

	@Override
	public String getModelClassName() {
		return Report.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Report, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Report, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Report, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Report)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Report, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Report, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Report)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Report, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Report, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Report, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Report, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Report, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Report, Object>>();
		Map<String, BiConsumer<Report, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Report, ?>>();

		attributeGetterFunctions.put("uuid", Report::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Report, String>)Report::setUuid);
		attributeGetterFunctions.put("reportId", Report::getReportId);
		attributeSetterBiConsumers.put(
			"reportId", (BiConsumer<Report, Long>)Report::setReportId);
		attributeGetterFunctions.put("categoryId", Report::getCategoryId);
		attributeSetterBiConsumers.put(
			"categoryId", (BiConsumer<Report, Long>)Report::setCategoryId);
		attributeGetterFunctions.put("groupId", Report::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Report, Long>)Report::setGroupId);
		attributeGetterFunctions.put("companyId", Report::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Report, Long>)Report::setCompanyId);
		attributeGetterFunctions.put("userId", Report::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Report, Long>)Report::setUserId);
		attributeGetterFunctions.put("createDate", Report::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Report, Date>)Report::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Report::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Report, Date>)Report::setModifiedDate);
		attributeGetterFunctions.put("name", Report::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Report, String>)Report::setName);
		attributeGetterFunctions.put("description", Report::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Report, String>)Report::setDescription);
		attributeGetterFunctions.put("icon", Report::getIcon);
		attributeSetterBiConsumers.put(
			"icon", (BiConsumer<Report, String>)Report::setIcon);
		attributeGetterFunctions.put("sources", Report::getSources);
		attributeSetterBiConsumers.put(
			"sources", (BiConsumer<Report, String>)Report::setSources);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reportId = reportId;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryId = categoryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalName() {
		return getColumnOriginalValue("name");
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getIcon() {
		if (_icon == null) {
			return "";
		}
		else {
			return _icon;
		}
	}

	@Override
	public void setIcon(String icon) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icon = icon;
	}

	@JSON
	@Override
	public String getSources() {
		if (_sources == null) {
			return "";
		}
		else {
			return _sources;
		}
	}

	@Override
	public void setSources(String sources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sources = sources;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Report.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Report toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Report>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReportImpl reportImpl = new ReportImpl();

		reportImpl.setUuid(getUuid());
		reportImpl.setReportId(getReportId());
		reportImpl.setCategoryId(getCategoryId());
		reportImpl.setGroupId(getGroupId());
		reportImpl.setCompanyId(getCompanyId());
		reportImpl.setUserId(getUserId());
		reportImpl.setCreateDate(getCreateDate());
		reportImpl.setModifiedDate(getModifiedDate());
		reportImpl.setName(getName());
		reportImpl.setDescription(getDescription());
		reportImpl.setIcon(getIcon());
		reportImpl.setSources(getSources());

		reportImpl.resetOriginalValues();

		return reportImpl;
	}

	@Override
	public Report cloneWithOriginalValues() {
		ReportImpl reportImpl = new ReportImpl();

		reportImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		reportImpl.setReportId(this.<Long>getColumnOriginalValue("reportId"));
		reportImpl.setCategoryId(
			this.<Long>getColumnOriginalValue("categoryId"));
		reportImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		reportImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		reportImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		reportImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		reportImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		reportImpl.setName(this.<String>getColumnOriginalValue("name"));
		reportImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		reportImpl.setIcon(this.<String>getColumnOriginalValue("icon"));
		reportImpl.setSources(this.<String>getColumnOriginalValue("sources"));

		return reportImpl;
	}

	@Override
	public int compareTo(Report report) {
		int value = 0;

		value = getName().compareTo(report.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Report)) {
			return false;
		}

		Report report = (Report)object;

		ReportPK primaryKey = report.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Report> toCacheModel() {
		ReportCacheModel reportCacheModel = new ReportCacheModel();

		reportCacheModel.reportPK = getPrimaryKey();

		reportCacheModel.uuid = getUuid();

		String uuid = reportCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			reportCacheModel.uuid = null;
		}

		reportCacheModel.reportId = getReportId();

		reportCacheModel.categoryId = getCategoryId();

		reportCacheModel.groupId = getGroupId();

		reportCacheModel.companyId = getCompanyId();

		reportCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			reportCacheModel.createDate = createDate.getTime();
		}
		else {
			reportCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			reportCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			reportCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		reportCacheModel.name = getName();

		String name = reportCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			reportCacheModel.name = null;
		}

		reportCacheModel.description = getDescription();

		String description = reportCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			reportCacheModel.description = null;
		}

		reportCacheModel.icon = getIcon();

		String icon = reportCacheModel.icon;

		if ((icon != null) && (icon.length() == 0)) {
			reportCacheModel.icon = null;
		}

		reportCacheModel.sources = getSources();

		String sources = reportCacheModel.sources;

		if ((sources != null) && (sources.length() == 0)) {
			reportCacheModel.sources = null;
		}

		return reportCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Report, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Report, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Report, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Report)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Report>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Report.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _reportId;
	private long _categoryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _description;
	private String _icon;
	private String _sources;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Report, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Report)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("reportId", _reportId);
		_columnOriginalValues.put("categoryId", _categoryId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("icon", _icon);
		_columnOriginalValues.put("sources", _sources);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("reportId", 2L);

		columnBitmasks.put("categoryId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("name", 256L);

		columnBitmasks.put("description", 512L);

		columnBitmasks.put("icon", 1024L);

		columnBitmasks.put("sources", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Report _escapedModel;

}